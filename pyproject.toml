[tool.poetry]
name = "messengers-summarizer"
version = "0.1.0"
description = "Application that reads specified chats from Telegram and provides summary on topics discussed in unread messages."
authors = ["Yevhenii Kosharnyi <y.kosharnyi@elsevier.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
transformers = "^4.43.2"
ollama = "^0.3.0"
telethon = "^1.36.0"
ruff = "^0.5.5"
langchain = "^0.2.12"
langchainhub = "^0.1.20"
langchain-community = "^0.2.11"
langchain-chroma = "^0.1.2"

[tool.poetry.group.dev.dependencies]
ruff = "^0.5.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]

# ruff is less lenient than pylint and does not make any exceptions
# (for docstrings, strings and comments in particular).
line-length = 115

[tool.ruff.lint]
select = [
    "B",  # bugbear
    "D",  # pydocstyle
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
    "PIE", # flake8-pie
    "PTH",  # flake8-pathlib
    "PYI", # flake8-pyi
    "UP", # pyupgrade
    "RUF", # ruff
    "W",  # pycodestyle
]

ignore = [
    "B905",  # `zip()` without an explicit `strict=` parameter
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in `__init__`
    "D205",  # 1 blank line required between summary line and description
    "D400",  # First line should end with a period
    "D401",  # First line of docstring should be in imperative mood
    "PTH100",  # `os.path.abspath()` should be replaced by `Path.resolve()`
    "PTH103",  # `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    "PTH107",  # `os.remove()` should be replaced by `Path.unlink()`
    "PTH108",  # `os.unlink()` should be replaced by `Path.unlink()`
    "PTH109",  # `os.getcwd()` should be replaced by `Path.cwd()`
    "PTH110",  # `os.path.exists()` should be replaced by `Path.exists()`
    "PTH111",  # `os.path.expanduser()` should be replaced by `Path.expanduser()`
    "PTH112",  # `os.path.isdir()` should be replaced by `Path.is_dir()`
    "PTH113",  # `os.path.isfile()` should be replaced by `Path.is_file()`
    "PTH118",  # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH119",  # `os.path.basename()` should be replaced by `Path.name`
    "PTH120",  # `os.path.dirname()` should be replaced by `Path.parent`
    "PTH122",  # `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    "PTH123",  # `open()` should be replaced by `Path.open()`
    "PTH207",  # Replace `glob` with `Path.glob` or `Path.rglob`
    "RUF012",  # mutable default values in class attributes
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
